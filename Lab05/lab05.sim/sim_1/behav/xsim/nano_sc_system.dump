$date
   Mon Mar 11 13:12:11 2019
$end
$version
  2018.3
$end
$timescale
  1ps
$end
$scope module pc_test $end
$scope module nss $end
$var wire 16 ! p_address [15:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 16 # d_address [15:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var reg 1 & clock $end
$var reg 1 ' nreset $end
$scope module CPU $end
$var wire 16 ! p_address [15:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 16 # d_address [15:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var wire 1 ( clock $end
$var wire 1 ) nreset $end
$var wire 32 * instruction [31:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 5 , rs [4:0] $end
$var wire 5 - rt [4:0] $end
$var wire 5 . rd [4:0] $end
$var wire 11 / reserved [10:0] $end
$var wire 16 0 imm [15:0] $end
$var wire 16 1 addr [15:0] $end
$var reg 16 2 pc [15:0] $end
$var wire 1 3 sel_addpc $end
$var wire 1 4 sel_pc $end
$var wire 16 5 pc_add [15:0] $end
$var wire 1 6 pc_cout $end
$var wire 16 7 pc_add_b [15:0] $end
$var wire 16 8 pc_new [15:0] $end
$var wire 32 9 imm_ext [31:0] $end
$var wire 2 : ext_ops [1:0] $end
$var reg 1 ; z_flag $end
$var reg 1 < c_flag $end
$var wire 1 = reg_wr $end
$var wire 1 > sel_wr $end
$var wire 1 ? sel_data $end
$var wire 1 @ sel_b $end
$var wire 1 A z_new $end
$var wire 1 B c_new $end
$var wire 3 C alu_ops [2:0] $end
$var wire 32 D A [31:0] $end
$var wire 32 E B [31:0] $end
$var wire 32 F data_selected [31:0] $end
$var wire 32 G data_S [31:0] $end
$var wire 32 H data_M [31:0] $end
$var wire 32 I B_selected [31:0] $end
$var wire 5 J rw [4:0] $end
$scope module PCADDER $end
$var wire 16 5 S [15:0] $end
$var wire 1 6 Cout $end
$var wire 16 K A [15:0] $end
$var wire 16 7 B [15:0] $end
$var wire 1 L Cin $end
$var parameter 32 M WIDTH [31:0] $end
$upscope $end
$scope module MUXADDPC $end
$var wire 16 7 out [15:0] $end
$var wire 16 N in0 [15:0] $end
$var wire 16 0 in1 [15:0] $end
$var wire 1 3 sel $end
$var parameter 32 O WIDTH [31:0] $end
$upscope $end
$scope module MUXSELPC $end
$var wire 16 8 out [15:0] $end
$var wire 16 5 in0 [15:0] $end
$var wire 16 1 in1 [15:0] $end
$var wire 1 4 sel $end
$var parameter 32 P WIDTH [31:0] $end
$upscope $end
$scope module EXTENDER $end
$var reg 32 Q data32 [31:0] $end
$var wire 16 0 data16 [15:0] $end
$var wire 2 : ext_ops [1:0] $end
$upscope $end
$scope module MUXRW $end
$var wire 5 J out [4:0] $end
$var wire 5 . in0 [4:0] $end
$var wire 5 - in1 [4:0] $end
$var wire 1 > sel $end
$var parameter 32 R WIDTH [31:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 32 D A [31:0] $end
$var wire 32 E B [31:0] $end
$var wire 32 F data [31:0] $end
$var wire 5 , ra [4:0] $end
$var wire 5 - rb [4:0] $end
$var wire 5 J rw [4:0] $end
$var wire 1 S nwr $end
$var wire 1 ( clock $end
$var integer 32 T i $end
$upscope $end
$scope module MUXDATA $end
$var wire 32 F out [31:0] $end
$var wire 32 G in0 [31:0] $end
$var wire 32 H in1 [31:0] $end
$var wire 1 ? sel $end
$var parameter 32 U WIDTH [31:0] $end
$upscope $end
$scope module MUXB $end
$var wire 32 I out [31:0] $end
$var wire 32 E in0 [31:0] $end
$var wire 32 9 in1 [31:0] $end
$var wire 1 @ sel $end
$var parameter 32 V WIDTH [31:0] $end
$upscope $end
$scope module ALU $end
$var reg 32 W S [31:0] $end
$var wire 1 A z $end
$var reg 1 X Cout $end
$var wire 32 D A [31:0] $end
$var wire 32 I B [31:0] $end
$var wire 1 Y Cin $end
$var wire 3 C alu_ops [2:0] $end
$upscope $end
$scope module CONTROLUNIT $end
$var reg 1 Z sel_pc $end
$var reg 1 [ sel_addpc $end
$var reg 1 \ sel_wr $end
$var reg 1 ] sel_b $end
$var reg 1 ^ sel_data $end
$var reg 1 _ reg_wr $end
$var reg 1 ` mem_wr $end
$var reg 2 a ext_ops [1:0] $end
$var reg 3 b alu_ops [2:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 1 A z_flag $end
$var parameter 6 c ORI [5:0] $end
$var parameter 6 d ORUI [5:0] $end
$var parameter 6 e ADD [5:0] $end
$var parameter 6 f SUB [5:0] $end
$var parameter 6 g OR [5:0] $end
$var parameter 6 h AND [5:0] $end
$var parameter 6 i XOR [5:0] $end
$var parameter 6 j COM [5:0] $end
$var parameter 6 k NOT [5:0] $end
$var parameter 6 l LW [5:0] $end
$var parameter 6 m SW [5:0] $end
$var parameter 6 n BEQ [5:0] $end
$var parameter 6 o JMP [5:0] $end
$upscope $end
$upscope $end
$scope module PROGMEM $end
$var wire 32 " data [31:0] $end
$var wire 16 ! address [15:0] $end
$var parameter 32 p DATA_WIDTH [31:0] $end
$var parameter 32 q ADDR_WIDTH [31:0] $end
$upscope $end
$scope module DATAMEM $end
$var wire 32 % data [31:0] $end
$var wire 16 # address [15:0] $end
$var wire 1 $ wr $end
$var wire 1 r clock $end
$var reg 32 s data_out [31:0] $end
$var integer 32 t i $end
$var parameter 32 u DATA_WIDTH [31:0] $end
$var parameter 32 v ADDR_WIDTH [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !
bx "
bx #
x$
bx %
0&
0'
0(
0)
bx *
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
bx 2
x3
x4
bx 5
x6
bx 7
bx 8
bx 9
bx :
x;
x<
x=
x>
x?
x@
xA
xB
bx C
bx D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
1L
b10000 M
b0 N
b10000 O
b10000 P
bx Q
b101 R
xS
b100000 T
b100000 U
b100000 V
bx W
xX
xY
xZ
x[
x\
x]
x^
x_
x`
bx a
bx b
b10000 c
b10001 d
b1 e
b10 f
b11 g
b100 h
b101 i
b110 j
b111 k
b11000 l
b11100 m
b101000 n
b110000 o
b100000 p
b10000 q
0r
bx s
bx t
b100000 u
b10000 v
$end
#20000
b0 !
b1000000110001100000000000000100 "
b100 #
0$
b101 %
1&
1(
b1000000110001100000000000000100 *
b10000 +
b110 ,
b110 -
b0 .
b100 /
b100 0
b100 1
b0 2
03
04
b1 5
06
b0 7
b1 8
b100 9
b0 :
0;
0<
1=
1>
0?
1@
0A
0B
b10 C
b0 D
b0 E
b100 F
b100 G
b101 H
b100 I
b110 J
b0 K
b100 Q
0S
b100 W
0X
0Y
0Z
0[
1\
1]
0^
1_
0`
b0 a
b10 b
1r
b101 s
#40000
0&
1'
0(
1)
0r
#60000
b1 !
b1000000111001110000000000000111 "
b111 #
b0 %
1&
1(
b1000000111001110000000000000111 *
b10000 +
b111 ,
b111 -
b0 .
b111 /
b111 0
b111 1
b1 2
b10 5
06
b0 7
b10 8
b111 9
0A
b0 D
b0 E
b111 F
b111 G
b0 H
b111 I
b111 J
b1 K
b111 Q
b111 W
0X
1r
b0 s
#80000
0&
0(
0r
#100000
b10 !
b100110001110000100000000000 "
b1011 #
b0 %
1&
1(
b100110001110000100000000000 *
b1 +
b110 ,
b111 -
b1 .
b0 /
b100000000000 0
b100000000000 1
b10 2
b11 5
06
b0 7
b11 8
b100000000000 9
0>
0@
0A
b0 C
b100 D
b111 E
b1011 F
b1011 G
b111 I
b1 J
b10 K
b100000000000 Q
b1011 W
0X
0Z
0[
0\
0]
0^
1_
0`
b0 a
b0 b
1r
b0 s
#120000
0&
0(
0r
#140000
b11 !
b1000111001100000100000000000 "
b11 #
b100 %
1&
1(
b1000111001100000100000000000 *
b10 +
b111 ,
b110 -
b1 .
b0 /
b11 2
b100 5
06
b100 8
0A
b1 C
b111 D
b100 E
b11 F
b11 G
b100 H
b100 I
b1 J
b11 K
b11 W
0X
0Z
0[
0\
0]
0^
1_
0`
b0 a
b1 b
1r
b100 s
#160000
0&
0(
0r
#180000
b100 !
b1100110001110000100000000000 "
b111 #
b0 %
1&
1(
b1100110001110000100000000000 *
b11 +
b110 ,
b111 -
b1 .
b0 /
b100 2
b101 5
06
b101 8
0A
0B
b10 C
b100 D
b111 E
b111 F
b111 G
b0 H
b111 I
b1 J
b100 K
b111 W
0X
0Z
0[
0\
0]
0^
1_
0`
b0 a
b10 b
1r
b0 s
#200000
0&
0(
0r
#220000
b101 !
b10000110001110000100000000000 "
b100 #
b101 %
1&
1(
b10000110001110000100000000000 *
b100 +
b110 ,
b111 -
b1 .
b0 /
b101 2
b110 5
06
b110 8
0A
b11 C
b100 D
b111 E
b100 F
b100 G
b101 H
b101 K
b100 W
0X
0Z
0[
0\
0]
0^
1_
0`
b0 a
b11 b
1r
b101 s
#240000
0&
0(
0r
#260000
b110 !
b10100110001110000100000000000 "
b11 #
b100 %
1&
1(
b10100110001110000100000000000 *
b101 +
b110 ,
b111 -
b1 .
b0 /
b110 2
b111 5
06
b111 8
0A
b100 C
b100 D
b111 E
b11 F
b11 G
b100 H
b110 K
b11 W
0X
0Z
0[
0\
0]
0^
1_
0`
b0 a
b100 b
1r
b100 s
#280000
0&
0(
0r
#300000
b111 !
b11000110000010000100000000000 "
b1111111111111100 #
bx %
1&
1(
b11000110000010000100000000000 *
b110 +
b110 ,
b1 -
b1 .
b0 /
b111 2
b1000 5
06
b1000 8
1>
0A
b101 C
b100 D
b11 E
b11111111111111111111111111111100 F
b11111111111111111111111111111100 G
bx H
b11 I
b1 J
b111 K
b11111111111111111111111111111100 W
0X
0Z
0[
1\
0]
0^
1_
0`
b0 a
b101 b
1r
bx s
#320000
0&
0(
0r
#340000
b1000 !
b11100110000010000100000000000 "
b1111111111111011 #
bx %
1&
1(
b11100110000010000100000000000 *
b111 +
b110 ,
b1 -
b1 .
b0 /
b1000 2
b1001 5
06
b1001 8
0A
b110 C
b100 D
b11111111111111111111111111111100 E
b11111111111111111111111111111011 F
b11111111111111111111111111111011 G
b11111111111111111111111111111100 I
b1000 K
b11111111111111111111111111111011 W
0X
0Z
0[
1\
0]
0^
1_
0`
b0 a
b110 b
1r
bx s
#360000
0&
0(
0r
#380000
b1001 !
bx "
bx #
bx %
1&
1(
bx *
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
b1001 2
b1010 5
06
b0 7
b1010 8
b0xxxxxxxxxxxxxxxx 9
0=
0>
xA
xB
b0 C
bx D
bx E
bx F
bx G
bx I
bx J
b1001 K
b0xxxxxxxxxxxxxxxx Q
1S
bx W
xX
0Z
0[
0\
0]
0^
0_
0`
b0 a
b0 b
1r
bx s
#400000
0&
0(
0r
#420000
b1010 !
bx "
1&
1(
b1010 2
b1011 5
06
b1011 8
x;
x<
b1010 K
xY
1r
#440000
0&
0(
0r
#460000
b1011 !
bx "
1&
1(
b1011 2
b1100 5
06
b1100 8
b1011 K
1r
#480000
0&
0(
0r
#500000
b1100 !
bx "
1&
1(
b1100 2
b1101 5
06
b1101 8
b1100 K
1r
#520000
0&
0(
0r
#540000
b1101 !
bx "
1&
1(
b1101 2
b1110 5
06
b1110 8
b1101 K
1r
#560000
0&
0(
0r
#580000
b1110 !
bx "
1&
1(
b1110 2
b1111 5
06
b1111 8
b1110 K
1r
#600000
0&
0(
0r
#620000
b1111 !
bx "
1&
1(
b1111 2
b10000 5
06
b10000 8
b1111 K
1r
#640000
0&
0(
0r
#660000
b10000 !
bx "
1&
1(
b10000 2
b10001 5
06
b10001 8
b10000 K
1r
#680000
0&
0(
0r
#700000
b10001 !
bx "
1&
1(
b10001 2
b10010 5
06
b10010 8
b10001 K
1r
#720000
0&
0(
0r
#740000
b10010 !
bx "
1&
1(
b10010 2
b10011 5
06
b10011 8
b10010 K
1r
#760000
0&
0(
0r
#780000
b10011 !
bx "
1&
1(
b10011 2
b10100 5
06
b10100 8
b10011 K
1r
#800000
0&
0(
0r
#820000
b10100 !
bx "
1&
1(
b10100 2
b10101 5
06
b10101 8
b10100 K
1r
#840000
0&
0(
0r
#860000
b10101 !
bx "
1&
1(
b10101 2
b10110 5
06
b10110 8
b10101 K
1r
#880000
0&
0(
0r
#900000
b10110 !
bx "
1&
1(
b10110 2
b10111 5
06
b10111 8
b10110 K
1r
#920000
0&
0(
0r
#940000
b10111 !
bx "
1&
1(
b10111 2
b11000 5
06
b11000 8
b10111 K
1r
#960000
0&
0(
0r
#980000
b11000 !
bx "
1&
1(
b11000 2
b11001 5
06
b11001 8
b11000 K
1r
